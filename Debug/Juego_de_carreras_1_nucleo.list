
Juego_de_carreras_1_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e78  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800203c  0800203c  0000303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800204c  0800204c  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800204c  0800204c  0000304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002054  08002054  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002054  08002054  00003054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002058  08002058  00003058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800205c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000010  0800206c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  0800206c  0000403c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044f7  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000111d  00000000  00000000  00008537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00009658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000370  00000000  00000000  00009b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002088b  00000000  00000000  00009e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006720  00000000  00000000  0002a70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5bc1  00000000  00000000  00030e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f69ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001144  00000000  00000000  000f6a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f7b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002024 	.word	0x08002024

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002024 	.word	0x08002024

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fcae 	bl	8000e94 <HAL_Init>

  /* USER CODE BEGIN Init */
  ganador = 0;
 8000538:	4b92      	ldr	r3, [pc, #584]	@ (8000784 <main+0x254>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
  contador1 = 0;
 800053e:	4b92      	ldr	r3, [pc, #584]	@ (8000788 <main+0x258>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
  contador2 = 0;
 8000544:	4b91      	ldr	r3, [pc, #580]	@ (800078c <main+0x25c>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
  estado = 0;
 800054a:	4b91      	ldr	r3, [pc, #580]	@ (8000790 <main+0x260>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
  leds1 = 0;
 8000550:	4b90      	ldr	r3, [pc, #576]	@ (8000794 <main+0x264>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
  leds2 = 0;
 8000556:	4b90      	ldr	r3, [pc, #576]	@ (8000798 <main+0x268>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f924 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f982 	bl	8000868 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
if(display == 0){
 8000564:	4b8d      	ldr	r3, [pc, #564]	@ (800079c <main+0x26c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d101      	bne.n	8000570 <main+0x40>
	conteoRegresivo();
 800056c:	f000 fa34 	bl	80009d8 <conteoRegresivo>
	//reseteocontadores();
}
  if(display == 1){
 8000570:	4b8a      	ldr	r3, [pc, #552]	@ (800079c <main+0x26c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d1f5      	bne.n	8000564 <main+0x34>
		if (estado == 1){
 8000578:	4b85      	ldr	r3, [pc, #532]	@ (8000790 <main+0x260>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d147      	bne.n	8000610 <main+0xe0>
		  if(ganador != 2 && contador2 != 4){
 8000580:	4b80      	ldr	r3, [pc, #512]	@ (8000784 <main+0x254>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b02      	cmp	r3, #2
 8000586:	f000 808c 	beq.w	80006a2 <main+0x172>
 800058a:	4b80      	ldr	r3, [pc, #512]	@ (800078c <main+0x25c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	f000 8087 	beq.w	80006a2 <main+0x172>
			  if(contador1 <4){
 8000594:	4b7c      	ldr	r3, [pc, #496]	@ (8000788 <main+0x258>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d82e      	bhi.n	80005fa <main+0xca>
					HAL_GPIO_WritePin(PC0_GPIO_Port, PC0_Pin, (leds1 >> 0) & 1);
 800059c:	4b7d      	ldr	r3, [pc, #500]	@ (8000794 <main+0x264>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	2101      	movs	r1, #1
 80005aa:	487d      	ldr	r0, [pc, #500]	@ (80007a0 <main+0x270>)
 80005ac:	f000 ffae 	bl	800150c <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(PC1_GPIO_Port, PC1_Pin, (leds1 >> 1) & 1);
 80005b0:	4b78      	ldr	r3, [pc, #480]	@ (8000794 <main+0x264>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	085b      	lsrs	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	2102      	movs	r1, #2
 80005c2:	4877      	ldr	r0, [pc, #476]	@ (80007a0 <main+0x270>)
 80005c4:	f000 ffa2 	bl	800150c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, (leds1 >> 2) & 1);
 80005c8:	4b72      	ldr	r3, [pc, #456]	@ (8000794 <main+0x264>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	2104      	movs	r1, #4
 80005da:	4871      	ldr	r0, [pc, #452]	@ (80007a0 <main+0x270>)
 80005dc:	f000 ff96 	bl	800150c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PC3_GPIO_Port, PC3_Pin, (leds1 >> 3) & 1);
 80005e0:	4b6c      	ldr	r3, [pc, #432]	@ (8000794 <main+0x264>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	08db      	lsrs	r3, r3, #3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	2108      	movs	r1, #8
 80005f2:	486b      	ldr	r0, [pc, #428]	@ (80007a0 <main+0x270>)
 80005f4:	f000 ff8a 	bl	800150c <HAL_GPIO_WritePin>
 80005f8:	e006      	b.n	8000608 <main+0xd8>
			  }
			  else if(contador1 == 4){
 80005fa:	4b63      	ldr	r3, [pc, #396]	@ (8000788 <main+0x258>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d102      	bne.n	8000608 <main+0xd8>
						ganador = 1;
 8000602:	4b60      	ldr	r3, [pc, #384]	@ (8000784 <main+0x254>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
					}
				estado = 0;
 8000608:	4b61      	ldr	r3, [pc, #388]	@ (8000790 <main+0x260>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e048      	b.n	80006a2 <main+0x172>
		  }
		}
		else if (estado == 2){
 8000610:	4b5f      	ldr	r3, [pc, #380]	@ (8000790 <main+0x260>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d144      	bne.n	80006a2 <main+0x172>
		  if(ganador != 1 && contador1 != 4){
 8000618:	4b5a      	ldr	r3, [pc, #360]	@ (8000784 <main+0x254>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d040      	beq.n	80006a2 <main+0x172>
 8000620:	4b59      	ldr	r3, [pc, #356]	@ (8000788 <main+0x258>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d03c      	beq.n	80006a2 <main+0x172>
			//}
			//else if(estado == 2){
				//contador2++;
				if(contador2 < 4){
 8000628:	4b58      	ldr	r3, [pc, #352]	@ (800078c <main+0x25c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d82e      	bhi.n	800068e <main+0x15e>
					HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, (leds2 >> 0) & 1);
 8000630:	4b59      	ldr	r3, [pc, #356]	@ (8000798 <main+0x268>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	2101      	movs	r1, #1
 800063e:	4859      	ldr	r0, [pc, #356]	@ (80007a4 <main+0x274>)
 8000640:	f000 ff64 	bl	800150c <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, (leds2 >> 1) & 1);
 8000644:	4b54      	ldr	r3, [pc, #336]	@ (8000798 <main+0x268>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	461a      	mov	r2, r3
 8000654:	2102      	movs	r1, #2
 8000656:	4853      	ldr	r0, [pc, #332]	@ (80007a4 <main+0x274>)
 8000658:	f000 ff58 	bl	800150c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, (leds2 >> 2) & 1);
 800065c:	4b4e      	ldr	r3, [pc, #312]	@ (8000798 <main+0x268>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	089b      	lsrs	r3, r3, #2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	2104      	movs	r1, #4
 800066e:	484d      	ldr	r0, [pc, #308]	@ (80007a4 <main+0x274>)
 8000670:	f000 ff4c 	bl	800150c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, (leds2 >> 3) & 1);
 8000674:	4b48      	ldr	r3, [pc, #288]	@ (8000798 <main+0x268>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	08db      	lsrs	r3, r3, #3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	2108      	movs	r1, #8
 8000686:	4847      	ldr	r0, [pc, #284]	@ (80007a4 <main+0x274>)
 8000688:	f000 ff40 	bl	800150c <HAL_GPIO_WritePin>
 800068c:	e006      	b.n	800069c <main+0x16c>
				}
				else if(contador2 == 4){
 800068e:	4b3f      	ldr	r3, [pc, #252]	@ (800078c <main+0x25c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b04      	cmp	r3, #4
 8000694:	d102      	bne.n	800069c <main+0x16c>
					ganador = 2;
 8000696:	4b3b      	ldr	r3, [pc, #236]	@ (8000784 <main+0x254>)
 8000698:	2202      	movs	r2, #2
 800069a:	701a      	strb	r2, [r3, #0]
				}
				estado = 0;
 800069c:	4b3c      	ldr	r3, [pc, #240]	@ (8000790 <main+0x260>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		  }
		}
		  if(ganador == 1){
 80006a2:	4b38      	ldr	r3, [pc, #224]	@ (8000784 <main+0x254>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d131      	bne.n	800070e <main+0x1de>

			  contador1 = 4;
 80006aa:	4b37      	ldr	r3, [pc, #220]	@ (8000788 <main+0x258>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	701a      	strb	r2, [r3, #0]
			  contador2 = 0;
 80006b0:	4b36      	ldr	r3, [pc, #216]	@ (800078c <main+0x25c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PC0_GPIO_Port, PC0_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2101      	movs	r1, #1
 80006ba:	4839      	ldr	r0, [pc, #228]	@ (80007a0 <main+0x270>)
 80006bc:	f000 ff26 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PC1_GPIO_Port, PC1_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2102      	movs	r1, #2
 80006c4:	4836      	ldr	r0, [pc, #216]	@ (80007a0 <main+0x270>)
 80006c6:	f000 ff21 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2104      	movs	r1, #4
 80006ce:	4834      	ldr	r0, [pc, #208]	@ (80007a0 <main+0x270>)
 80006d0:	f000 ff1c 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PC3_GPIO_Port, PC3_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2108      	movs	r1, #8
 80006d8:	4831      	ldr	r0, [pc, #196]	@ (80007a0 <main+0x270>)
 80006da:	f000 ff17 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2101      	movs	r1, #1
 80006e2:	4830      	ldr	r0, [pc, #192]	@ (80007a4 <main+0x274>)
 80006e4:	f000 ff12 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2102      	movs	r1, #2
 80006ec:	482d      	ldr	r0, [pc, #180]	@ (80007a4 <main+0x274>)
 80006ee:	f000 ff0d 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2104      	movs	r1, #4
 80006f6:	482b      	ldr	r0, [pc, #172]	@ (80007a4 <main+0x274>)
 80006f8:	f000 ff08 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2108      	movs	r1, #8
 8000700:	4828      	ldr	r0, [pc, #160]	@ (80007a4 <main+0x274>)
 8000702:	f000 ff03 	bl	800150c <HAL_GPIO_WritePin>
			valordispl(uno);
 8000706:	23f9      	movs	r3, #249	@ 0xf9
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f9a3 	bl	8000a54 <valordispl>
			//ganador == 1;
		  }
		  if (ganador == 2){
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <main+0x254>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d131      	bne.n	800077a <main+0x24a>

			    contador2 = 4;
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <main+0x25c>)
 8000718:	2204      	movs	r2, #4
 800071a:	701a      	strb	r2, [r3, #0]
			    contador1 = 0;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <main+0x258>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2101      	movs	r1, #1
 8000726:	481f      	ldr	r0, [pc, #124]	@ (80007a4 <main+0x274>)
 8000728:	f000 fef0 	bl	800150c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	481c      	ldr	r0, [pc, #112]	@ (80007a4 <main+0x274>)
 8000732:	f000 feeb 	bl	800150c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2104      	movs	r1, #4
 800073a:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <main+0x274>)
 800073c:	f000 fee6 	bl	800150c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4817      	ldr	r0, [pc, #92]	@ (80007a4 <main+0x274>)
 8000746:	f000 fee1 	bl	800150c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PC0_GPIO_Port, PC0_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2101      	movs	r1, #1
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <main+0x270>)
 8000750:	f000 fedc 	bl	800150c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PC1_GPIO_Port, PC1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2102      	movs	r1, #2
 8000758:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <main+0x270>)
 800075a:	f000 fed7 	bl	800150c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2104      	movs	r1, #4
 8000762:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <main+0x270>)
 8000764:	f000 fed2 	bl	800150c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PC3_GPIO_Port, PC3_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2108      	movs	r1, #8
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <main+0x270>)
 800076e:	f000 fecd 	bl	800150c <HAL_GPIO_WritePin>
				valordispl(dos);
 8000772:	23a4      	movs	r3, #164	@ 0xa4
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f96d 	bl	8000a54 <valordispl>
				//ganador == 2;
		  }
		  HAL_Delay(200);
 800077a:	20c8      	movs	r0, #200	@ 0xc8
 800077c:	f000 fbfc 	bl	8000f78 <HAL_Delay>
if(display == 0){
 8000780:	e6f0      	b.n	8000564 <main+0x34>
 8000782:	bf00      	nop
 8000784:	2000002f 	.word	0x2000002f
 8000788:	2000002c 	.word	0x2000002c
 800078c:	2000002d 	.word	0x2000002d
 8000790:	2000002e 	.word	0x2000002e
 8000794:	20000030 	.word	0x20000030
 8000798:	20000031 	.word	0x20000031
 800079c:	20000000 	.word	0x20000000
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020400 	.word	0x40020400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	@ 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2234      	movs	r2, #52	@ 0x34
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fc08 	bl	8001fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <SystemClock_Config+0xb8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	4a22      	ldr	r2, [pc, #136]	@ (8000860 <SystemClock_Config+0xb8>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	@ 0x40
 80007dc:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <SystemClock_Config+0xb8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <SystemClock_Config+0xbc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <SystemClock_Config+0xbc>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <SystemClock_Config+0xbc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f937 	bl	8001a90 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000828:	f000 fa86 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fe92 	bl	8001570 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000852:	f000 fa71 	bl	8000d38 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	@ 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b50      	ldr	r3, [pc, #320]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a4f      	ldr	r2, [pc, #316]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b4d      	ldr	r3, [pc, #308]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b49      	ldr	r3, [pc, #292]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a48      	ldr	r2, [pc, #288]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b46      	ldr	r3, [pc, #280]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b42      	ldr	r3, [pc, #264]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a41      	ldr	r2, [pc, #260]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b3f      	ldr	r3, [pc, #252]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b3b      	ldr	r3, [pc, #236]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a3a      	ldr	r2, [pc, #232]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b38      	ldr	r3, [pc, #224]	@ (80009c4 <MX_GPIO_Init+0x15c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC0_Pin|PC1_Pin|PC2_Pin|PC3_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	4835      	ldr	r0, [pc, #212]	@ (80009c8 <MX_GPIO_Init+0x160>)
 80008f4:	f000 fe0a 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|PB1_Pin|PB2_Pin|G_Pin
 80008f8:	2200      	movs	r2, #0
 80008fa:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80008fe:	4833      	ldr	r0, [pc, #204]	@ (80009cc <MX_GPIO_Init+0x164>)
 8000900:	f000 fe04 	bl	800150c <HAL_GPIO_WritePin>
                          |PB3_Pin|A_Pin|B_Pin|C_Pin
                          |D_Pin|E_Pin|F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0_Pin PC1_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC0_Pin|PC1_Pin|PC2_Pin|PC3_Pin;
 8000904:	230f      	movs	r3, #15
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	482b      	ldr	r0, [pc, #172]	@ (80009c8 <MX_GPIO_Init+0x160>)
 800091c:	f000 fc62 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000920:	2302      	movs	r3, #2
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000924:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4826      	ldr	r0, [pc, #152]	@ (80009d0 <MX_GPIO_Init+0x168>)
 8000936:	f000 fc55 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN3_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin;
 800093a:	2310      	movs	r3, #16
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4820      	ldr	r0, [pc, #128]	@ (80009d0 <MX_GPIO_Init+0x168>)
 8000950:	f000 fc48 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_Pin PB1_Pin PB2_Pin G_Pin
                           PB3_Pin A_Pin B_Pin C_Pin
                           D_Pin E_Pin F_Pin */
  GPIO_InitStruct.Pin = PB0_Pin|PB1_Pin|PB2_Pin|G_Pin
 8000954:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000958:	617b      	str	r3, [r7, #20]
                          |PB3_Pin|A_Pin|B_Pin|C_Pin
                          |D_Pin|E_Pin|F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4817      	ldr	r0, [pc, #92]	@ (80009cc <MX_GPIO_Init+0x164>)
 800096e:	f000 fc39 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000972:	2304      	movs	r3, #4
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000976:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097c:	2301      	movs	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <MX_GPIO_Init+0x16c>)
 8000988:	f000 fc2c 	bl	80011e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2007      	movs	r0, #7
 8000992:	f000 fbf0 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fc09 	bl	80011ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2008      	movs	r0, #8
 80009a2:	f000 fbe8 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009a6:	2008      	movs	r0, #8
 80009a8:	f000 fc01 	bl	80011ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	200a      	movs	r0, #10
 80009b2:	f000 fbe0 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009b6:	200a      	movs	r0, #10
 80009b8:	f000 fbf9 	bl	80011ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	@ 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <conteoRegresivo>:

/* USER CODE BEGIN 4 */
void conteoRegresivo() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

    if (display == 0) {
 80009dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <conteoRegresivo+0x78>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d132      	bne.n	8000a4a <conteoRegresivo+0x72>
    			//cba
    	valordispl(cinco);        // Muestra "5"
 80009e4:	2392      	movs	r3, #146	@ 0x92
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f834 	bl	8000a54 <valordispl>
        HAL_Delay(1000);          // Pausa de 1 segundo
 80009ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f0:	f000 fac2 	bl	8000f78 <HAL_Delay>
        valordispl(cuatro);       // Muestra "4"
 80009f4:	2399      	movs	r3, #153	@ 0x99
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f82c 	bl	8000a54 <valordispl>
        HAL_Delay(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a00:	f000 faba 	bl	8000f78 <HAL_Delay>
        valordispl(tres);         // Muestra "3"
 8000a04:	23b0      	movs	r3, #176	@ 0xb0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f824 	bl	8000a54 <valordispl>
        HAL_Delay(1000);
 8000a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a10:	f000 fab2 	bl	8000f78 <HAL_Delay>
        valordispl(dos);          // Muestra "2"
 8000a14:	23a4      	movs	r3, #164	@ 0xa4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f81c 	bl	8000a54 <valordispl>
        HAL_Delay(1000);
 8000a1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a20:	f000 faaa 	bl	8000f78 <HAL_Delay>
        valordispl(uno);          // Muestra "1"
 8000a24:	23f9      	movs	r3, #249	@ 0xf9
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f814 	bl	8000a54 <valordispl>
        HAL_Delay(1000);
 8000a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a30:	f000 faa2 	bl	8000f78 <HAL_Delay>
        valordispl(cero);         // Muestra "0"
 8000a34:	23c0      	movs	r3, #192	@ 0xc0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f80c 	bl	8000a54 <valordispl>
        HAL_Delay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a40:	f000 fa9a 	bl	8000f78 <HAL_Delay>
        display = 1;              // Cambia el estado para no repetir
 8000a44:	4b02      	ldr	r3, [pc, #8]	@ (8000a50 <conteoRegresivo+0x78>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
    }
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000

08000a54 <valordispl>:

void valordispl(uint8_t numero){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, (numero & 0b00000001)); // Bit menos significativo no cambia
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4826      	ldr	r0, [pc, #152]	@ (8000b04 <valordispl+0xb0>)
 8000a6c:	f000 fd4e 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, (numero & 0b00000010) >> 1);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	105b      	asrs	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4820      	ldr	r0, [pc, #128]	@ (8000b04 <valordispl+0xb0>)
 8000a82:	f000 fd43 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, (numero & 0b00000100) >> 2);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	109b      	asrs	r3, r3, #2
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	2140      	movs	r1, #64	@ 0x40
 8000a96:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <valordispl+0xb0>)
 8000a98:	f000 fd38 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, (numero & 0b00001000) >> 3);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	10db      	asrs	r3, r3, #3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	4815      	ldr	r0, [pc, #84]	@ (8000b04 <valordispl+0xb0>)
 8000aae:	f000 fd2d 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, (numero & 0b00010000) >> 4);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	111b      	asrs	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac4:	480f      	ldr	r0, [pc, #60]	@ (8000b04 <valordispl+0xb0>)
 8000ac6:	f000 fd21 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, (numero & 0b00100000) >> 5);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	115b      	asrs	r3, r3, #5
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000adc:	4809      	ldr	r0, [pc, #36]	@ (8000b04 <valordispl+0xb0>)
 8000ade:	f000 fd15 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, (numero & 0b01000000) >> 6);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	119b      	asrs	r3, r3, #6
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <valordispl+0xb0>)
 8000af6:	f000 fd09 	bl	800150c <HAL_GPIO_WritePin>

}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40020400 	.word	0x40020400

08000b08 <reseteocontadores>:
void reseteocontadores(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
		contador1 = 0;
 8000b0c:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <reseteocontadores+0xe0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		contador2 = 0;
 8000b12:	4b36      	ldr	r3, [pc, #216]	@ (8000bec <reseteocontadores+0xe4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		ganador = 0;
 8000b18:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <reseteocontadores+0xe8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		leds1 = 0;
 8000b1e:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <reseteocontadores+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PC0_GPIO_Port, PC0_Pin, (leds1 >> 0) & 1);
 8000b24:	4b33      	ldr	r3, [pc, #204]	@ (8000bf4 <reseteocontadores+0xec>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	2101      	movs	r1, #1
 8000b32:	4831      	ldr	r0, [pc, #196]	@ (8000bf8 <reseteocontadores+0xf0>)
 8000b34:	f000 fcea 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PC1_GPIO_Port, PC1_Pin, (leds1 >> 1) & 1);
 8000b38:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf4 <reseteocontadores+0xec>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	085b      	lsrs	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	2102      	movs	r1, #2
 8000b4a:	482b      	ldr	r0, [pc, #172]	@ (8000bf8 <reseteocontadores+0xf0>)
 8000b4c:	f000 fcde 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PC2_GPIO_Port, PC2_Pin, (leds1 >> 2) & 1);
 8000b50:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <reseteocontadores+0xec>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2104      	movs	r1, #4
 8000b62:	4825      	ldr	r0, [pc, #148]	@ (8000bf8 <reseteocontadores+0xf0>)
 8000b64:	f000 fcd2 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PC3_GPIO_Port, PC3_Pin, (leds1 >> 3) & 1);
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <reseteocontadores+0xec>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	2108      	movs	r1, #8
 8000b7a:	481f      	ldr	r0, [pc, #124]	@ (8000bf8 <reseteocontadores+0xf0>)
 8000b7c:	f000 fcc6 	bl	800150c <HAL_GPIO_WritePin>
		leds2 = 0;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <reseteocontadores+0xf4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin, (leds2 >> 0) & 1);
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <reseteocontadores+0xf4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	2101      	movs	r1, #1
 8000b94:	481a      	ldr	r0, [pc, #104]	@ (8000c00 <reseteocontadores+0xf8>)
 8000b96:	f000 fcb9 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB1_GPIO_Port, PB1_Pin, (leds2 >> 1) & 1);
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <reseteocontadores+0xf4>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	085b      	lsrs	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2102      	movs	r1, #2
 8000bac:	4814      	ldr	r0, [pc, #80]	@ (8000c00 <reseteocontadores+0xf8>)
 8000bae:	f000 fcad 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB2_GPIO_Port, PB2_Pin, (leds2 >> 2) & 1);
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <reseteocontadores+0xf4>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <reseteocontadores+0xf8>)
 8000bc6:	f000 fca1 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, (leds2 >> 3) & 1);
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <reseteocontadores+0xf4>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	2108      	movs	r1, #8
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <reseteocontadores+0xf8>)
 8000bde:	f000 fc95 	bl	800150c <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000002c 	.word	0x2000002c
 8000bec:	2000002d 	.word	0x2000002d
 8000bf0:	2000002f 	.word	0x2000002f
 8000bf4:	20000030 	.word	0x20000030
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	20000031 	.word	0x20000031
 8000c00:	40020400 	.word	0x40020400

08000c04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick(); // Obtiene el tiempo actual en ms
 8000c0e:	f000 f9a7 	bl	8000f60 <HAL_GetTick>
 8000c12:	60f8      	str	r0, [r7, #12]

    if ((current_time - last_interrupt_time) < 300) { // Tiempo mínimo entre interrupciones (300 ms)
 8000c14:	4b41      	ldr	r3, [pc, #260]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x118>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000c20:	d377      	bcc.n	8000d12 <HAL_GPIO_EXTI_Callback+0x10e>
        return; // Ignora la interrupción (rebote)
    }
    last_interrupt_time = current_time;
 8000c22:	4a3e      	ldr	r2, [pc, #248]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x118>)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6013      	str	r3, [r2, #0]

    // Asegúrate de limitar leds1 a 4 bits inferiores y leds2 a los 4 bits superiores
    if ((GPIO_Pin == BTN2_Pin) && (display == 1)) {
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d132      	bne.n	8000c94 <HAL_GPIO_EXTI_Callback+0x90>
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d12e      	bne.n	8000c94 <HAL_GPIO_EXTI_Callback+0x90>
        if (contador1 < 4) {
 8000c36:	4b3b      	ldr	r3, [pc, #236]	@ (8000d24 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d86a      	bhi.n	8000d14 <HAL_GPIO_EXTI_Callback+0x110>
            contador1++;
 8000c3e:	4b39      	ldr	r3, [pc, #228]	@ (8000d24 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c48:	701a      	strb	r2, [r3, #0]
            estado = 1;
 8000c4a:	4b37      	ldr	r3, [pc, #220]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0x124>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
        switch(contador1){
 8000c50:	4b34      	ldr	r3, [pc, #208]	@ (8000d24 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d81a      	bhi.n	8000c90 <HAL_GPIO_EXTI_Callback+0x8c>
 8000c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c60 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c71 	.word	0x08000c71
 8000c64:	08000c79 	.word	0x08000c79
 8000c68:	08000c81 	.word	0x08000c81
 8000c6c:	08000c89 	.word	0x08000c89
        case 1:
        	leds1 = 1;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x128>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
        break;
 8000c76:	e00c      	b.n	8000c92 <HAL_GPIO_EXTI_Callback+0x8e>
        case 2:
        	leds1 = 2;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x128>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	701a      	strb	r2, [r3, #0]
        break;
 8000c7e:	e008      	b.n	8000c92 <HAL_GPIO_EXTI_Callback+0x8e>
        case 3:
        	leds1 = 4;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x128>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	701a      	strb	r2, [r3, #0]
        break;
 8000c86:	e004      	b.n	8000c92 <HAL_GPIO_EXTI_Callback+0x8e>
        case 4:
        	leds1 = 8;
 8000c88:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x128>)
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	701a      	strb	r2, [r3, #0]
        break;
 8000c8e:	e000      	b.n	8000c92 <HAL_GPIO_EXTI_Callback+0x8e>
        default:
        break;
 8000c90:	bf00      	nop
        if (contador1 < 4) {
 8000c92:	e03f      	b.n	8000d14 <HAL_GPIO_EXTI_Callback+0x110>
        }
        }
        }
        //contador2 = 0; // Resetea contador2 si BTN1 es presionado
	else if ((GPIO_Pin == BTN1_Pin) && (display == 1)) {
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d132      	bne.n	8000d00 <HAL_GPIO_EXTI_Callback+0xfc>
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d12e      	bne.n	8000d00 <HAL_GPIO_EXTI_Callback+0xfc>
        if (contador2 < 4) {
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d808      	bhi.n	8000cbc <HAL_GPIO_EXTI_Callback+0xb8>
            contador2++;
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000cb4:	701a      	strb	r2, [r3, #0]
            estado = 2;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cb8:	2202      	movs	r2, #2
 8000cba:	701a      	strb	r2, [r3, #0]
        }
        switch(contador2){
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d81a      	bhi.n	8000cfc <HAL_GPIO_EXTI_Callback+0xf8>
 8000cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ccc <HAL_GPIO_EXTI_Callback+0xc8>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000cdd 	.word	0x08000cdd
 8000cd0:	08000ce5 	.word	0x08000ce5
 8000cd4:	08000ced 	.word	0x08000ced
 8000cd8:	08000cf5 	.word	0x08000cf5
        case 1:
        	leds2 = 1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x130>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
        break;
 8000ce2:	e00c      	b.n	8000cfe <HAL_GPIO_EXTI_Callback+0xfa>
        case 2:
        	leds2 = 2;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
        break;
 8000cea:	e008      	b.n	8000cfe <HAL_GPIO_EXTI_Callback+0xfa>
        case 3:
        	leds2 = 4;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x130>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	701a      	strb	r2, [r3, #0]
        break;
 8000cf2:	e004      	b.n	8000cfe <HAL_GPIO_EXTI_Callback+0xfa>
        case 4:
        	leds2 = 8;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <HAL_GPIO_EXTI_Callback+0x130>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	701a      	strb	r2, [r3, #0]
        break;
 8000cfa:	e000      	b.n	8000cfe <HAL_GPIO_EXTI_Callback+0xfa>
        default:
        break;
 8000cfc:	bf00      	nop
        switch(contador2){
 8000cfe:	e009      	b.n	8000d14 <HAL_GPIO_EXTI_Callback+0x110>
        }
        //contador1 = 0; // Resetea contador1 si BTN2 es presionado
    }
	else if (GPIO_Pin == BTN3_Pin){
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	2b10      	cmp	r3, #16
 8000d04:	d106      	bne.n	8000d14 <HAL_GPIO_EXTI_Callback+0x110>
		display = 0;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
		reseteocontadores();
 8000d0c:	f7ff fefc 	bl	8000b08 <reseteocontadores>
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_EXTI_Callback+0x110>
        return; // Ignora la interrupción (rebote)
 8000d12:	bf00      	nop
	}
}
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000034 	.word	0x20000034
 8000d20:	20000000 	.word	0x20000000
 8000d24:	2000002c 	.word	0x2000002c
 8000d28:	2000002e 	.word	0x2000002e
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	2000002d 	.word	0x2000002d
 8000d34:	20000031 	.word	0x20000031

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x8>

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a0f      	ldr	r2, [pc, #60]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f8a5 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f000 fba2 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000e04:	2004      	movs	r0, #4
 8000e06:	f000 fb9b 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000e12:	2010      	movs	r0, #16
 8000e14:	f000 fb94 	bl	8001540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f001 f8b5 	bl	8001fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb5d 	bl	8000530 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e84:	0800205c 	.word	0x0800205c
  ldr r2, =_sbss
 8000e88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e8c:	2000003c 	.word	0x2000003c

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	@ (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f94f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff ff3c 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f967 	bl	80011ca <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 f92f 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	@ (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	2000000c 	.word	0x2000000c
 8000f34:	20000008 	.word	0x20000008

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000038 	.word	0x20000038

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000038 	.word	0x20000038

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000000c 	.word	0x2000000c

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	@ (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	@ (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e165      	b.n	80014cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8154 	bne.w	80014c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80ae 	beq.w	80014c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b5d      	ldr	r3, [pc, #372]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	4a5c      	ldr	r2, [pc, #368]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	6453      	str	r3, [r2, #68]	@ 0x44
 800137a:	4b5a      	ldr	r3, [pc, #360]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a58      	ldr	r2, [pc, #352]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	@ (80014ec <HAL_GPIO_Init+0x308>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d025      	beq.n	80013fe <HAL_GPIO_Init+0x21a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4e      	ldr	r2, [pc, #312]	@ (80014f0 <HAL_GPIO_Init+0x30c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x216>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4d      	ldr	r2, [pc, #308]	@ (80014f4 <HAL_GPIO_Init+0x310>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x212>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	@ (80014f8 <HAL_GPIO_Init+0x314>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x20e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	@ (80014fc <HAL_GPIO_Init+0x318>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x20a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001500 <HAL_GPIO_Init+0x31c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x206>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a49      	ldr	r2, [pc, #292]	@ (8001504 <HAL_GPIO_Init+0x320>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x202>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e00c      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e00a      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b3a      	ldr	r3, [pc, #232]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a31      	ldr	r2, [pc, #196]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <HAL_GPIO_Init+0x324>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a26      	ldr	r2, [pc, #152]	@ (8001508 <HAL_GPIO_Init+0x324>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001472:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001496:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <HAL_GPIO_Init+0x324>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c0:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <HAL_GPIO_Init+0x324>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f ae96 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	@ 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fb50 	bl	8000c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0cc      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b68      	ldr	r3, [pc, #416]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d90c      	bls.n	80015ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b65      	ldr	r3, [pc, #404]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b63      	ldr	r3, [pc, #396]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0b8      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c4:	4b59      	ldr	r3, [pc, #356]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a58      	ldr	r2, [pc, #352]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015dc:	4b53      	ldr	r3, [pc, #332]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a52      	ldr	r2, [pc, #328]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e8:	4b50      	ldr	r3, [pc, #320]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	494d      	ldr	r1, [pc, #308]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d044      	beq.n	8001690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b47      	ldr	r3, [pc, #284]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d119      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e07f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d003      	beq.n	800162e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162a:	2b03      	cmp	r3, #3
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e06f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e067      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f023 0203 	bic.w	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4934      	ldr	r1, [pc, #208]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7ff fc7e 	bl	8000f60 <HAL_GetTick>
 8001664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	e00a      	b.n	800167e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001668:	f7ff fc7a 	bl	8000f60 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e04f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 020c 	and.w	r2, r3, #12
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	429a      	cmp	r2, r3
 800168e:	d1eb      	bne.n	8001668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001690:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d20c      	bcs.n	80016b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e032      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4916      	ldr	r1, [pc, #88]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	490e      	ldr	r1, [pc, #56]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016f6:	f000 f821 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	490a      	ldr	r1, [pc, #40]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	5ccb      	ldrb	r3, [r1, r3]
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fbde 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00
 800172c:	40023800 	.word	0x40023800
 8001730:	0800203c 	.word	0x0800203c
 8001734:	20000004 	.word	0x20000004
 8001738:	20000008 	.word	0x20000008

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001740:	b0a6      	sub	sp, #152	@ 0x98
 8001742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001762:	4bc8      	ldr	r3, [pc, #800]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b0c      	cmp	r3, #12
 800176c:	f200 817e 	bhi.w	8001a6c <HAL_RCC_GetSysClockFreq+0x330>
 8001770:	a201      	add	r2, pc, #4	@ (adr r2, 8001778 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	080017ad 	.word	0x080017ad
 800177c:	08001a6d 	.word	0x08001a6d
 8001780:	08001a6d 	.word	0x08001a6d
 8001784:	08001a6d 	.word	0x08001a6d
 8001788:	080017b5 	.word	0x080017b5
 800178c:	08001a6d 	.word	0x08001a6d
 8001790:	08001a6d 	.word	0x08001a6d
 8001794:	08001a6d 	.word	0x08001a6d
 8001798:	080017bd 	.word	0x080017bd
 800179c:	08001a6d 	.word	0x08001a6d
 80017a0:	08001a6d 	.word	0x08001a6d
 80017a4:	08001a6d 	.word	0x08001a6d
 80017a8:	08001927 	.word	0x08001927
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ac:	4bb6      	ldr	r3, [pc, #728]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017b2:	e15f      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b4:	4bb5      	ldr	r3, [pc, #724]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x350>)
 80017b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017ba:	e15b      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c8:	4bae      	ldr	r3, [pc, #696]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d031      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d4:	4bab      	ldr	r3, [pc, #684]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	2200      	movs	r2, #0
 80017dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80017e8:	2300      	movs	r3, #0
 80017ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80017ec:	4ba7      	ldr	r3, [pc, #668]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x350>)
 80017ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017f2:	462a      	mov	r2, r5
 80017f4:	fb03 f202 	mul.w	r2, r3, r2
 80017f8:	2300      	movs	r3, #0
 80017fa:	4621      	mov	r1, r4
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	4aa2      	ldr	r2, [pc, #648]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x350>)
 8001804:	4621      	mov	r1, r4
 8001806:	fba1 1202 	umull	r1, r2, r1, r2
 800180a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800180c:	460a      	mov	r2, r1
 800180e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001810:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001812:	4413      	add	r3, r2
 8001814:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800181a:	2200      	movs	r2, #0
 800181c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800181e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001820:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001824:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001828:	f7fe fcec 	bl	8000204 <__aeabi_uldivmod>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4613      	mov	r3, r2
 8001832:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001836:	e064      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001838:	4b92      	ldr	r3, [pc, #584]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	2200      	movs	r2, #0
 8001840:	653b      	str	r3, [r7, #80]	@ 0x50
 8001842:	657a      	str	r2, [r7, #84]	@ 0x54
 8001844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800184a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800184c:	2300      	movs	r3, #0
 800184e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001850:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001854:	4622      	mov	r2, r4
 8001856:	462b      	mov	r3, r5
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	0159      	lsls	r1, r3, #5
 8001862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001866:	0150      	lsls	r0, r2, #5
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4621      	mov	r1, r4
 800186e:	1a51      	subs	r1, r2, r1
 8001870:	6139      	str	r1, [r7, #16]
 8001872:	4629      	mov	r1, r5
 8001874:	eb63 0301 	sbc.w	r3, r3, r1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001886:	4659      	mov	r1, fp
 8001888:	018b      	lsls	r3, r1, #6
 800188a:	4651      	mov	r1, sl
 800188c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001890:	4651      	mov	r1, sl
 8001892:	018a      	lsls	r2, r1, #6
 8001894:	4651      	mov	r1, sl
 8001896:	ebb2 0801 	subs.w	r8, r2, r1
 800189a:	4659      	mov	r1, fp
 800189c:	eb63 0901 	sbc.w	r9, r3, r1
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018b4:	4690      	mov	r8, r2
 80018b6:	4699      	mov	r9, r3
 80018b8:	4623      	mov	r3, r4
 80018ba:	eb18 0303 	adds.w	r3, r8, r3
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	462b      	mov	r3, r5
 80018c2:	eb49 0303 	adc.w	r3, r9, r3
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018d4:	4629      	mov	r1, r5
 80018d6:	028b      	lsls	r3, r1, #10
 80018d8:	4621      	mov	r1, r4
 80018da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018de:	4621      	mov	r1, r4
 80018e0:	028a      	lsls	r2, r1, #10
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018ea:	2200      	movs	r2, #0
 80018ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80018ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80018f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018f4:	f7fe fc86 	bl	8000204 <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4613      	mov	r3, r2
 80018fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001902:	4b60      	ldr	r3, [pc, #384]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0c1b      	lsrs	r3, r3, #16
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	3301      	adds	r3, #1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001914:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001918:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001924:	e0a6      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001926:	4b57      	ldr	r3, [pc, #348]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800192e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001932:	4b54      	ldr	r3, [pc, #336]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d02a      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193e:	4b51      	ldr	r3, [pc, #324]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	099b      	lsrs	r3, r3, #6
 8001944:	2200      	movs	r2, #0
 8001946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001948:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800194a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800194c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001950:	2100      	movs	r1, #0
 8001952:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x350>)
 8001954:	fb03 f201 	mul.w	r2, r3, r1
 8001958:	2300      	movs	r3, #0
 800195a:	fb00 f303 	mul.w	r3, r0, r3
 800195e:	4413      	add	r3, r2
 8001960:	4a4a      	ldr	r2, [pc, #296]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x350>)
 8001962:	fba0 1202 	umull	r1, r2, r0, r2
 8001966:	677a      	str	r2, [r7, #116]	@ 0x74
 8001968:	460a      	mov	r2, r1
 800196a:	673a      	str	r2, [r7, #112]	@ 0x70
 800196c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800196e:	4413      	add	r3, r2
 8001970:	677b      	str	r3, [r7, #116]	@ 0x74
 8001972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001976:	2200      	movs	r2, #0
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
 800197a:	637a      	str	r2, [r7, #52]	@ 0x34
 800197c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001980:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001984:	f7fe fc3e 	bl	8000204 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001992:	e05b      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001994:	4b3b      	ldr	r3, [pc, #236]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	2200      	movs	r2, #0
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800199e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019b0:	4642      	mov	r2, r8
 80019b2:	464b      	mov	r3, r9
 80019b4:	f04f 0000 	mov.w	r0, #0
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	0159      	lsls	r1, r3, #5
 80019be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c2:	0150      	lsls	r0, r2, #5
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4641      	mov	r1, r8
 80019ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ce:	4649      	mov	r1, r9
 80019d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019e8:	ebb2 040a 	subs.w	r4, r2, sl
 80019ec:	eb63 050b 	sbc.w	r5, r3, fp
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	00eb      	lsls	r3, r5, #3
 80019fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fe:	00e2      	lsls	r2, r4, #3
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	4643      	mov	r3, r8
 8001a06:	18e3      	adds	r3, r4, r3
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	eb45 0303 	adc.w	r3, r5, r3
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	028b      	lsls	r3, r1, #10
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a28:	4621      	mov	r1, r4
 8001a2a:	028a      	lsls	r2, r1, #10
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a34:	2200      	movs	r2, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	61fa      	str	r2, [r7, #28]
 8001a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3e:	f7fe fbe1 	bl	8000204 <__aeabi_uldivmod>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4613      	mov	r3, r2
 8001a48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0f1b      	lsrs	r3, r3, #28
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a6a:	e003      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3798      	adds	r7, #152	@ 0x98
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	017d7840 	.word	0x017d7840

08001a90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e28d      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8083 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ab0:	4b94      	ldr	r3, [pc, #592]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d019      	beq.n	8001af0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001abc:	4b91      	ldr	r3, [pc, #580]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ad4:	d00c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d112      	bne.n	8001b08 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae2:	4b88      	ldr	r3, [pc, #544]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aee:	d10b      	bne.n	8001b08 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	4b84      	ldr	r3, [pc, #528]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d05b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x124>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d157      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e25a      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b10:	d106      	bne.n	8001b20 <HAL_RCC_OscConfig+0x90>
 8001b12:	4b7c      	ldr	r3, [pc, #496]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7b      	ldr	r2, [pc, #492]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xcc>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0xb4>
 8001b2a:	4b76      	ldr	r3, [pc, #472]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a75      	ldr	r2, [pc, #468]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b73      	ldr	r3, [pc, #460]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a72      	ldr	r2, [pc, #456]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xcc>
 8001b44:	4b6f      	ldr	r3, [pc, #444]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b6c      	ldr	r3, [pc, #432]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6b      	ldr	r2, [pc, #428]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9fc 	bl	8000f60 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f9f8 	bl	8000f60 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e21f      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b61      	ldr	r3, [pc, #388]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xdc>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f9e8 	bl	8000f60 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff f9e4 	bl	8000f60 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e20b      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b57      	ldr	r3, [pc, #348]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x104>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d06f      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bc2:	4b50      	ldr	r3, [pc, #320]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d017      	beq.n	8001bfe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bce:	4b4d      	ldr	r3, [pc, #308]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d105      	bne.n	8001be6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bda:	4b4a      	ldr	r3, [pc, #296]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be6:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d11c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	4b44      	ldr	r3, [pc, #272]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	4b41      	ldr	r3, [pc, #260]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x186>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e1d3      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4937      	ldr	r1, [pc, #220]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e03a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <HAL_RCC_OscConfig+0x278>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f991 	bl	8000f60 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff f98d 	bl	8000f60 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1b4      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4925      	ldr	r1, [pc, #148]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_RCC_OscConfig+0x278>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f970 	bl	8000f60 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff f96c 	bl	8000f60 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e193      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d036      	beq.n	8001d1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f950 	bl	8000f60 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f94c 	bl	8000f60 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e173      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x234>
 8001ce2:	e01b      	b.n	8001d1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff f939 	bl	8000f60 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	e00e      	b.n	8001d10 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f935 	bl	8000f60 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d907      	bls.n	8001d10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e15c      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	42470000 	.word	0x42470000
 8001d0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b8a      	ldr	r3, [pc, #552]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ea      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8097 	beq.w	8001e58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b83      	ldr	r3, [pc, #524]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a7e      	ldr	r2, [pc, #504]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b79      	ldr	r3, [pc, #484]	@ (8001f40 <HAL_RCC_OscConfig+0x4b0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d66:	4b76      	ldr	r3, [pc, #472]	@ (8001f40 <HAL_RCC_OscConfig+0x4b0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	@ (8001f40 <HAL_RCC_OscConfig+0x4b0>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7ff f8f5 	bl	8000f60 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7ff f8f1 	bl	8000f60 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e118      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f40 <HAL_RCC_OscConfig+0x4b0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x31e>
 8001da0:	4b66      	ldr	r3, [pc, #408]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da4:	4a65      	ldr	r2, [pc, #404]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x358>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x340>
 8001db6:	4b61      	ldr	r3, [pc, #388]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dba:	4a60      	ldr	r2, [pc, #384]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x358>
 8001dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	4a59      	ldr	r2, [pc, #356]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ddc:	4b57      	ldr	r3, [pc, #348]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	4a56      	ldr	r2, [pc, #344]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f8b6 	bl	8000f60 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff f8b2 	bl	8000f60 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0d7      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <HAL_RCC_OscConfig+0x368>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f8a0 	bl	8000f60 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff f89c 	bl	8000f60 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0c1      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3a:	4b40      	ldr	r3, [pc, #256]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ee      	bne.n	8001e24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	4a3a      	ldr	r2, [pc, #232]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80ad 	beq.w	8001fbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e62:	4b36      	ldr	r3, [pc, #216]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d060      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d145      	bne.n	8001f02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b33      	ldr	r3, [pc, #204]	@ (8001f44 <HAL_RCC_OscConfig+0x4b4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f870 	bl	8000f60 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f86c 	bl	8000f60 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e093      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	019b      	lsls	r3, r3, #6
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	071b      	lsls	r3, r3, #28
 8001ece:	491b      	ldr	r1, [pc, #108]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_RCC_OscConfig+0x4b4>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff f841 	bl	8000f60 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f83d 	bl	8000f60 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e064      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x452>
 8001f00:	e05c      	b.n	8001fbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_RCC_OscConfig+0x4b4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f82a 	bl	8000f60 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f826 	bl	8000f60 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e04d      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_RCC_OscConfig+0x4ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x480>
 8001f2e:	e045      	b.n	8001fbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e040      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000
 8001f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f48:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc8 <HAL_RCC_OscConfig+0x538>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d030      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d129      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d122      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d119      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	3b01      	subs	r3, #1
 8001f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10f      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800

08001fcc <memset>:
 8001fcc:	4402      	add	r2, r0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <memset+0xa>
 8001fd4:	4770      	bx	lr
 8001fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fda:	e7f9      	b.n	8001fd0 <memset+0x4>

08001fdc <__libc_init_array>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	4d0d      	ldr	r5, [pc, #52]	@ (8002014 <__libc_init_array+0x38>)
 8001fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8002018 <__libc_init_array+0x3c>)
 8001fe2:	1b64      	subs	r4, r4, r5
 8001fe4:	10a4      	asrs	r4, r4, #2
 8001fe6:	2600      	movs	r6, #0
 8001fe8:	42a6      	cmp	r6, r4
 8001fea:	d109      	bne.n	8002000 <__libc_init_array+0x24>
 8001fec:	4d0b      	ldr	r5, [pc, #44]	@ (800201c <__libc_init_array+0x40>)
 8001fee:	4c0c      	ldr	r4, [pc, #48]	@ (8002020 <__libc_init_array+0x44>)
 8001ff0:	f000 f818 	bl	8002024 <_init>
 8001ff4:	1b64      	subs	r4, r4, r5
 8001ff6:	10a4      	asrs	r4, r4, #2
 8001ff8:	2600      	movs	r6, #0
 8001ffa:	42a6      	cmp	r6, r4
 8001ffc:	d105      	bne.n	800200a <__libc_init_array+0x2e>
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	f855 3b04 	ldr.w	r3, [r5], #4
 8002004:	4798      	blx	r3
 8002006:	3601      	adds	r6, #1
 8002008:	e7ee      	b.n	8001fe8 <__libc_init_array+0xc>
 800200a:	f855 3b04 	ldr.w	r3, [r5], #4
 800200e:	4798      	blx	r3
 8002010:	3601      	adds	r6, #1
 8002012:	e7f2      	b.n	8001ffa <__libc_init_array+0x1e>
 8002014:	08002054 	.word	0x08002054
 8002018:	08002054 	.word	0x08002054
 800201c:	08002054 	.word	0x08002054
 8002020:	08002058 	.word	0x08002058

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	bf00      	nop
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
